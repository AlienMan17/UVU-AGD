/*
-Duplicates and randomizes the positions of all selected objects
-Has the minimum parameters: # of duplicates, range of #'s to randomize the range for x, y, and z positions
-Create a UI for the tool with fields for any needed values or inputs
-Summary: duplicate select object X times(parameter), and randomly placed each copy in scene(parameter), and finally has UI for tool values/parameters/user inputs that also calls the function 
*/

global proc CloseWindow(string $window)
{
    deleteUI -window $window;
}

//Basic function/procedure idea for now
global proc DuplicateAndDisperse(int $dupeAmt, vector $disperseArea)
{
    string $objectsSelected[];
    vector $movePositionBy;
    string $dupedObjects[] = {};
    string $selection[] = `ls -selection`;

    $objectsSelected = stringArrayCatenate($objectsSelected,  $selection);//appends each selected object after clearing the array

    //Loops though the objects to dupe everything, then randomly positions each object
    for ($i=1; $i<=size($objectsSelected); $i++)
    {
        for ($j=0; $j<$dupeAmt; $j++)
        {
            //Creates a custom name for each copy, and adds the name to a list
            string $dupedObjNames[1];
            $dupedObjNames[0] = ($objectsSelected[$j] + $i);
            duplicate -name $dupedObjNames[0] $objectsSelected[$j];
            $dupedObjects = stringArrayCatenate($dupedObjects, $dupedObjNames);
        }
    }
    for ($i=0; $i<size($dupedObjects); $i++)
    {
        select $dupedObjects[$i];
        $movePositionBy = `rand $disperseArea`;
        move -relative $movePositionBy;
    }
}

global proc OpenWindow()
{
    string $mWindow = "DuplicateAndDisperse";
    //closes all pre-existing windows with the same given name
    if (`window -exists $mWindow`)
    {
        CloseWindow($mWindow);
    }

    //Create the window (tabs for hiearchy clarity, no purpose)
    $mWindow = `window -title "Duplicate and Disperse" -widthHeight 500 500 -sizeable 1 $mWindow`;

        string $mColumn =  `columnLayout -parent $mWindow`;
            text -parent $mColumn -label "Duplicate Amount";
            optionVar -stringValue "#_of_copies" `intField`;
            text -parent $mColumn -label "X, Y, and Z range to scatter duplicates within" -annotation "relative to the collective orgin of the selected objects";
            string $headerRow = `rowLayout -parent $mColumn -numberOfColumns 3`;
                text -parent $headerRow "X";
                text -parent $headerRow "Y";
                text -parent $headerRow "Z";
            string $vectorRow = `rowLayout -parent $mColumn -numberOfColumns 3`;
                optionVar -stringValue "Range_of_X" `floatField`;
                optionVar -stringValue "Range_of_Y" `floatField`;
                optionVar -stringValue "Range_of_Z" `floatField`;

    string $copyCountString = `optionVar -q "#_of_copies"`;
    int $copyCount = `intField -q -value $copyCountString`;
    string $x = `optionVar -q "Range_of_X"`;
    string $y = `optionVar -q "Range_of_Y"`;
    string $z = `optionVar -q "Range_of_Z"`;
    float $xVal = `floatField -q -value $x`;
    float $yVal = `floatField -q -value $y`;
    float $zVal = `floatField -q -value $z`;
    string $commandString = ("DuplicateAndDisperse(" + $copyCount + ",<<" + $xVal + ", " + $yVal + ", " + $zVal + ">>)");

            string $buttonRow = `rowLayout -parent $mColumn -numberOfColumns 2`;
                button -parent $buttonRow -label "Duplicate_And_Randomize" -command $commandString;
    showWindow $mWindow;
}

OpenWindow();