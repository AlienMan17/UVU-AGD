/*
-Separate funtion for each mathmatical operation(+, -, *, /, ^), along with Average and Median
-Returns float value
-Calculate all arguments (So that the size of the array won't matter)
-Returns the value based on user input via a window
*/

//Loops through the array, adding each number together 
global proc float Sum(float $inputNums[]) {
    float $result = 0;
    for ($i=0; $i<size($inputNums); $i++){
        $result += $inputNums[$i];
    }
    return $result;
}

//Loops through the array, subtracting each number together 
global proc float Difference(float $inputNums[]) {
    float $result = 0;
    for ($i=0; $i<size($inputNums); $i++){
        $result -= $inputNums[$i];
    }
    return $result;
}

//Loops through the array, multiplying each number
global proc float Multiply(float $inputNums[]) {
    float $result = 1;
    for ($i=0; $i<size($inputNums); $i++){
        $result *= $inputNums[$i];
    }
    return $result;
}

//Loops through the array, dividing the first number by each other number. Also makes sure to catch any 0's in the array
global proc float Divide(float $inputNums[]) {
    float $result = $inputNums[0];
    for ($i=0; $i<size($inputNums); $i++){
        if ($inputNums[$i] == 0) {
            print("Cannot divide by zero.\n");
        } else {
            $result /= $inputNums[$i];
        }
    }
    return $result;
}

//Loops through the array, the current index has a power of the next index applied to it (doesn't loop through the last element in the list as there is nothing after it so it would be a power of null)
//Unlike the others this procedure sums the result of each index rather than using the previous value. This is to avoid potentially huge numbers with larger array inputs.
global proc float Power(float $inputNums[]) {
    float $result;
    for ($i=0; $i<(size($inputNums)-1); $i++) {
        $result += pow($inputNums[$i], $inputNums[$i+1]);
    }
    return $result;
}

//Gets an average of the array
global proc float Average(float $inputNums[]) {
    float $result = 0;
    float $total = `Sum($inputNums)`;
    $result = $total / (size($inputNums));
    return $result;
}

//Gets the median of the array, and makes sure to account for odd or even array sizes
//If the median looks off from the inputted array that's because the array is sorted before selecting index's
global proc float Median(float $inputNums[]) {
    float $sortedNums[] = `sort $inputNums`;
    float $remainder = (size($sortedNums) % 2);
    int $tempMedian = size($sortedNums)/2; //stores a value reapted in the procedure
    float $result = 0;
    if ($remainder == 0) {
        $result = ($sortedNums[$tempMedian-1] + $sortedNums[$tempMedian]) / 2;
    } else {
        $result = $sortedNums[(size($sortedNums)-1)/2];
    }
        return $result;
}

//Takes an array of numbers and does a mathematical operation based on the type set with a string
global proc string Calculator(string $selectedFunct, float $inputArray[]) {
    float $result;
    if ($selectedFunct == "add") {
        $result = Sum($inputArray);
    } else if ($selectedFunct == "subtract") {
        $result = Difference($inputArray);
    } else if ($selectedFunct == "multiply") {
        $result = Multiply($inputArray);
    } else if ($selectedFunct == "divide") {
        $result = Divide($inputArray);
    } else if ($selectedFunct == "average") {
        $result = Average($inputArray);
    } else if ($selectedFunct == "median") {
        $result = Median($inputArray);
    } else if ($selectedFunct == "power"){ 
        $result = Power($inputArray);
    } else { 
        print("Invalid Function\n");
    }
    
    string $returnString = $result;
    //returns a string in this script because the operations have been complete, and it allows for a message like the one above
    return $returnString;
}

/*
global proc AddNumberToResult(float $num) {
    //grabs the needed variable information
    string $result = `optionVar -q "Result"`;
    string $resultBox[] = `optionVar -q "Results"`;
    float $inputtedNumbers[] = `optionVar -q "Numbers"`;
    int $index = `optionVar -q "Index"`;
    int $indexCount = `optionVar -q "Index_Count"`;
    int $listNumbers = `optionVar -q "List_Numbers"`;
    //checks if median or average was used, then proceeds accordingly
    if ($listNumbers) {
        $index++;
        $indexCount++;
        $inputtedNumbers[$index] = $num;
        $resultBox[$indexCount] = $num + ", ";
    } else {
        $inputtedNumbers[$index] += $num;
        $resultBox[$indexCount] = $num;
        $index++;
        $indexCount++;
    }

    $result = stringArrayToString($resultBox, " ");
}


global proc ClearResults() {
    optionVar -clear "Results";
    optionVar -clear "Numbers";
    optionVar -stringValue "Operation" "";
    optionVar -intValue "Index" 0;
    optionVar -intValue "Index_Count" 0;
    optionVar -intValue "List_Numbers" 0;
    optionVar -stringValue "Result" "";
}

//Launches a window with buttons to trigger certain calculate functions
global proc OpenCalculator() {

    string $mWindow = "Calculator";

    //closes all pre-existing windows with the same given name
    if (`window -exists $mWindow`) {
        deleteUI -window $mWindow;
    }

    optionVar -stringArray "Results";
    optionVar -floatArray "Numbers";
    optionVar -stringValue "Operation" "";
    optionVar -intValue "Index" 0;
    optionVar -intValue "Index_Count" 0;
    optionVar -intValue "List_Numbers" 0;

    string $result = `optionVar -q "Result"`;
    string $resultBox[] = `optionVar -q "Results"`;
    float $inputtedNumbers[] = `optionVar -q "Numbers"`;
    string $operationType = `optionVar -q "Operation"`;
    int $index = `optionVar -q "Index"`;//Fixed index, increments when only numbers are selected
    int $indexCount = `optionVar -q "Index_Count"`;//Index changes with any button press
    int $listNumbers = `optionVar -q "List_Numbers"`;

    $mWindow = `window -title "Calculator" -widthHeight 400 650 -sizeable 1 $mWindow`;
        string $mColumn = `columnLayout -parent $mWindow -width 400`;
            text -parent $mColumn "Select any numbers, numbers selected after a previous number become one, and finally, numbers are seperated through operations.";
            text -parent $mColumn "Result.";
            optionVar -stringValue "Result" `textField -editable 0`;
            text -parent $mColumn "Average, and Median must be clicked before entering numbers.";
            string $buttonLayout = `columnLayout -parent $mColumn`;
                string $buttonRowOne = `rowLayout -parent $buttonLayout -numberOfColumns 4`;
                    button -parent $buttonRowOne -label "Power" -command ($operationType + " = 'power'; " + $indexCount + "++; " + $resultBox[$indexCount] + " = '^ '; " + $result + " = " + stringArrayToString($resultBox, " "));
                    button -parent $buttonRowOne -label "Median" -command ($operationType + " = 'median'; " + $listNumbers + " = 1; " + $resultBox[$indexCount] + " = 'Median of-- '; " + $result + " = " + stringArrayToString($resultBox, " "));
                    button -parent $buttonRowOne -label "Average" -command ($operationType + " = 'average'; " + $listNumbers + " = 1; " + $resultBox[$indexCount] + " = 'Average of-- '; " + $result + " = " + stringArrayToString($resultBox, " "));
                    button -parent $buttonRowOne - label "Clear" -command ("ClearResults(); " + $result + " = " + stringArrayToString($resultBox, " "));
                string $buttonRowTwo = `rowLayout -parent $buttonLayout -numberOfColumns 4`;
                    button -parent $buttonRowTwo -label "1" -command("AddNumberToResult(1)");
                    button -parent $buttonRowTwo -label "2" -command("AddNumberToResult(2)");
                    button -parent $buttonRowTwo -label "3" -command("AddNumberToResult(3)");
                    button -parent $buttonRowTwo -label "+" -command($operationType + " = 'add'; " + $indexCount + "++; " + $resultBox[$indexCount] + " = '+ '; " + $result + " = " + stringArrayToString($resultBox, " "));
                string $buttonRowThree = `rowLayout -parent $buttonLayout -numberOfColumns 4`;
                    button -parent $buttonRowThree -label "4" -command("AddNumberToResult(4)");
                    button -parent $buttonRowThree -label "5" -command("AddNumberToResult(5)");
                    button -parent $buttonRowThree -label "6" -command("AddNumberToResult(6)");
                    button -parent $buttonRowThree -label "-" -command($operationType + " = 'subtract'; " + $indexCount + "++; " + $resultBox[$indexCount] + " = '- '; " + $result + " = " + stringArrayToString($resultBox, " "));
                string $buttonRowFour = `rowLayout -parent $buttonLayout -numberOfColumns 4`;
                    button -parent $buttonRowFour -label "7" -command("AddNumberToResult(7)");
                    button -parent $buttonRowFour -label "8" -command("AddNumberToResult(8)");
                    button -parent $buttonRowFour -label "9" -command("AddNumberToResult(9)");
                    button -parent $buttonRowFour -label "*" -command($operationType + " = 'multiply'; " + $indexCount + "++; " + $resultBox[$indexCount] + " = '* '; " + $result + " = " + stringArrayToString($resultBox, " "));
                string $buttonRowFive = `rowLayout -parent $buttonLayout -numberOfColumns 3`;
                    button -parent $buttonRowFive -label "0" -command("AddNumberToResult(0)");
                    button -parent $buttonRowFive -label "/" -command($operationType + " = 'multiply'; " + $indexCount + "++; " + $resultBox[$indexCount] + " = '/ '; " + $result + " = " + stringArrayToString($resultBox, " "));
                    button -parent $buttonRowFive -label "Calculate" -command ("Calculator(" + $operationType + ", " + floatArrayToString($inputtedNumbers, ", ") + "); " + $listNumbers + " = 0; " + $result + " = " + stringArrayToString($resultBox, " "));

    showWindow $mWindow;
}

OpenCalculator();
*/




//Here is a simple example to show I understand the assignment, just wanted to try it more robustly above




//The function below works by entering a any amount of numbers, clicking the "Next number" button to add the float to an array. The array is then stored until an operation button is clicked.

global proc AppendAsFloat(){
    string $result = `optionVar -q "Result"`;
    float $floatResult = `floatField -q -value $result`;
    optionVar -floatValueAppend "Nums" $floatResult;
}


global proc CalculateWindow()
{
    string $mWindow = "Calculator";

    //closes all pre-existing windows with the same given name
    if (`window -exists $mWindow`) {
        deleteUI -window $mWindow;
    }

    optionVar -floatArray "Nums";


    $mWindow = `window -title "Calculator" -widthHeight 400 650 -sizeable 1 $mWindow`;
        string $mColumn = `columnLayout -parent $mWindow -width 400`;
            text -parent $mColumn "Enter any number below and click \"Next Number\", when finished adding numbers click an operator to be used on the list of numbers.";
            string $mRow = `rowLayout -parent $mColumn`;
            optionVar -stringValue "Result" `floatField -parent $mColumn`;
            button -parent $mRow -label "Next number." -command ("AppendAsFloat()");
            string $buttonRowOne = `rowLayout -parent $mColumn -numberOfColumns 4`;
                button -parent $buttonRowOne -label "Median" - command ("print(Calculator(\"median\", `optionVar -q \"Nums\"`)\n)");
                button -parent $buttonRowOne -label "Average" - command ("print(Calculator(\"average\", `optionVar -q \"Nums\"`)\n)");
                button -parent $buttonRowOne -label "Power" - command ("print(Calculator(\"power\", `optionVar -q \"Nums\"`)\n)");
                button -parent $buttonRowOne -label "Add" - command ("print(Calculator(\"add\", `optionVar -q \"Nums\"`)\n)");
            string $buttonRowTwo = `rowLayout -parent $mColumn -numberOfColumns 4`;
                button -parent $buttonRowTwo -label "Subtract" - command ("print(Calculator(\"subtract\", `optionVar -q \"Nums\"`)\n)");
                button -parent $buttonRowTwo -label "Multiply" - command ("print(Calculator(\"multiply\", `optionVar -q \"Nums\"`)\n)");
                button -parent $buttonRowTwo -label "Divide" - command ("print(Calculator(\"divide\", `optionVar -q \"Nums\"`)\n)");
                button -parent $buttonRowTwo -label "Clear" - command ("optionVar -clearArray \"Nums\"");

    showWindow $mWindow;
}

CalculateWindow();